# -*- coding: utf-8 -*-
"""Chapter 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-teSfyQcUbZdKAByJ4sco78kZFzDj7lo

## 1. Prepare Your Python Environment

# **Chapter 2 excercise**

## Pipeline
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.impute import SimpleImputer
from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import fetch_california_housing

# Load and sample data (reduce to 2000 rows for speed)
housing_data = fetch_california_housing(as_frame=True)
housing = housing_data.data.sample(n=2000, random_state=42)
housing_labels = housing_data.target[housing.index]

# Numeric features only
numeric_features = housing.select_dtypes(include=["float64", "int64"]).columns.tolist()

# Define preprocessing pipeline
numeric_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())  # Placeholder
])

full_preprocessing_pipeline = ColumnTransformer([
    ('num', numeric_pipeline, numeric_features)
])

# Full pipeline
prep_grid_pipeline = Pipeline([
    ('preparation', full_preprocessing_pipeline),
    ('svr', SVR())
])

# Simplified grid
param_grid = {
    'preparation__num__scaler': [StandardScaler(), MinMaxScaler()],
    'svr__C': [10],
    'svr__gamma': [0.1],
    'svr__kernel': ['rbf']
}

# Grid search
final_grid_search = GridSearchCV(
    estimator=prep_grid_pipeline,
    param_grid=param_grid,
    cv=2,
    scoring='neg_mean_squared_error',
    n_jobs=-1,
    verbose=1,
    return_train_score=True
)

final_grid_search.fit(housing, housing_labels)

# Best results
best_params_final = final_grid_search.best_params_
best_rmse_final = np.sqrt(-final_grid_search.best_score_)
print("Best Pipeline Config:", best_params_final)
print(f"Best RMSE: {best_rmse_final:.2f}")

# ----------------------------
# ðŸ”¹ Data Visualization
# ----------------------------

# 1. RMSE Comparison Bar Chart
results_df = pd.DataFrame(final_grid_search.cv_results_)
results_df["mean_test_rmse"] = np.sqrt(-results_df["mean_test_score"])
results_df["Scaler"] = ['StandardScaler', 'MinMaxScaler']

plt.figure(figsize=(8, 5))
sns.barplot(data=results_df, x="Scaler", y="mean_test_rmse")
plt.title("Test RMSE by Scaler Type")
plt.ylabel("RMSE")
plt.xlabel("Scaler")
plt.tight_layout()
plt.show()

# 2. Feature Correlation Heatmap
plt.figure(figsize=(10, 6))
corr_matrix = housing.corr()
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Feature Correlation Heatmap")
plt.tight_layout()
plt.show()